/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        // Start typing your Java solution below
        // DO NOT write main() function
        int i=0;int count=0;
        ListNode l=head;
        ListNode temp=null;
        ListNode previous=null;
       if(k==1)return head;
        while(l!=null){
            i++;
            if(i==k)head=l;
            if(i%k==1){
                if(!isNull(k,l)){
                    temp=l.next;
                    ListNode temp2=l;
                    count =0;
                    while(count<2*k-1){
                        temp2=temp2.next;
                        count++;
                    }
                    l.next=temp2;
                    previous=l;
                    l=temp;
                }
                else{
                    
                    count =0;
                    temp=l.next;
                    ListNode temp2=l;
                    while(count<k){
                        temp2=temp2.next;
                        if(temp2==null)break;
                        count++;
                        
                    }
                    
                    if(count<k-1)return head;
                    /*else if(count==k-1){
                        l.next=null;
                        previous=l;
                        l=temp;
                    }*/
                    else{
                        l.next=temp2;
                        previous=l;
                        l=temp;
                    }
                }
               
            }
            else{
                temp=l.next;
                l.next=previous;
                previous=l;
                l=temp;
            }
        }
        return head;
    }
    public boolean isNull(int k,ListNode l){
        int i=0;
        while(l!=null&&i<=2*k){
            l=l.next;
            i++;
        }
        if(i<2*k)return true;
        else return false;
    }
}
